first_pls = plspm_traits_dfs_3(first_df)
second_pls = plspm_traits_dfs_3(second_df)
third_pls = plspm_traits_dfs_3(third_df)
}else if(type==4){
first_pls = plspm_traits_dfs_4(first_df)
second_pls = plspm_traits_dfs_4(second_df)
third_pls = plspm_traits_dfs_4(third_df)
}else if(type==5){
first_pls = plspm_traits_dfs_5(first_df)
second_pls = plspm_traits_dfs_5(second_df)
third_pls = plspm_traits_dfs_5(third_df)
}else if(type==6){
first_pls = plspm_traits_dfs_6(first_df)
second_pls = plspm_traits_dfs_6(second_df)
third_pls = plspm_traits_dfs_6(third_df)
}else if(type==7){
first_pls = plspm_traits_dfs_value(first_df)
second_pls = plspm_traits_dfs_value(second_df)
third_pls = plspm_traits_dfs_value(third_df)
}else if(type==8){
first_pls = plspm_traits_dfs_value_adjusted(first_df)
second_pls = plspm_traits_dfs_value_adjusted(second_df)
third_pls = plspm_traits_dfs_value_adjusted(third_df)
}else if(type==9){
first_pls = plspm_traits_dfs_value_adjusted_2(first_df)
second_pls = plspm_traits_dfs_value_adjusted_2(second_df)
third_pls = plspm_traits_dfs_value_adjusted_2(third_df)
}else if(type==10){
first_pls = plspm_traits_dfs_value_adjusted_3(first_df)
second_pls = plspm_traits_dfs_value_adjusted_3(second_df)
third_pls = plspm_traits_dfs_value_adjusted_3(third_df)
}else if(type==11){
first_pls = plspm_traits_dfs_adjusted_aest_eng(first_df)
second_pls = plspm_traits_dfs_adjusted_aest_eng(second_df)
third_pls = plspm_traits_dfs_adjusted_aest_eng(third_df)
}else if(type==12){
first_pls = plspm_traits_dfs_adjusted_eng_part_aest(first_df)
second_pls = plspm_traits_dfs_adjusted_eng_part_aest(second_df)
third_pls = plspm_traits_dfs_adjusted_eng_part_aest(third_df)
}else if(type==13){
first_pls = plspm_traits_dfs_mean(first_df)
second_pls = plspm_traits_dfs_mean(second_df)
third_pls = plspm_traits_dfs_mean(third_df)
}else if(type==14){
first_pls = plspm_traits_dfs_mean_adj_aest(first_df)
second_pls = plspm_traits_dfs_mean_adj_aest(second_df)
third_pls = plspm_traits_dfs_mean_adj_aest(third_df)
}
par(mfcol = c(3,2))
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, title = first_title, color_lim = color_lim)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, title = second_title, color_lim = color_lim)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, title = third_title, color_lim = color_lim)
mtext("Significative level = 0.05", line=-2, side=2, outer = TRUE)
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, significative_level = 0.1 ,title = first_title, color_lim = color_lim)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, significative_level = 0.1, title = second_title, color_lim = color_lim)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, significative_level = 0.1, title = third_title, color_lim = color_lim)
mtext("Significative level = 0.10", line = -1, side=4, outer = TRUE)
tab = list(first_pls, second_pls, third_pls)
return(tab)
}
traits_mean_df = data.frame(transmute(rowwise(traits_dfs_df), aesthetic = mean(c_across(c(15,16,17,19)))),
transmute(rowwise(traits_dfs_df), challenge = mean(c_across(25:29))),
transmute(rowwise(traits_dfs_df), narrative = mean(c_across(20:24))),
transmute(rowwise(traits_dfs_df), goals = mean(c_across(30:34))),
transmute(rowwise(traits_dfs_df), social = mean(c_across(10:14))))
View(traits_mean_df)
View(transmute(rowwise(traits_dfs_df), aesthetic = mean(c_across(c(15,16,17,19)))))
View(transmute(rowwise(traits_dfs_df), aesthetic = sum(c_across(c(15,16,17,19)))))
traits_blocks = 1:4
length(traits_blocks)
dfs_blocks = 5:13
length(dfs_blocks)
plspm_traits_dfs_value_adjusted_2 = function(traits_dfs_df){
traits_blocks = list(c(15,16,19), c(25,27,28,29), c(20,22,23,24), 30:33, 10:13)
dfs_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9))
presence_blocks = list(c(79,81,83))
traits_dfs_blocks = as.list(append(traits_blocks, dfs_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = read.csv(paste(model_path, "path_inner_model_adjusted_eng.csv", sep=''), header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:14]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
tab = pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Goals Scenario",
type=9, color_lim = NULL)
knit_plspm_results(tab[[1]][["traits_dfs_pls"]], "Aesthetic")
knit_plspm_results(tab[[2]][["traits_dfs_pls"]], "Narrative")
knit_plspm_results(tab[[3]][["traits_dfs_pls"]], "Goals")
pls_dfs = function(traits_dfs_df){
dfs_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9))
dfs_modes = rep("A", 9)
csb = c(1,0,0,0,0,0,0,0,0)
aa = c(1,1,0,0,0,0,0,0,0)
cg = c(1,1,1,0,0,0,0,0,0)
uf = c(1,1,1,1,0,0,0,0,0)
cnt = c(1,1,1,1,1,0,0,0,0)
soc = c(1,1,1,1,1,1,0,0,0)
lsc = c(1,1,1,1,1,1,1,0,0)
tt = c(1,1,1,1,1,1,1,1,0)
ae = c(1,1,1,1,1,1,1,1,1)
dfs_path = rbind(csb, aa, cg, uf, cnt, soc, lsc, tt, ae)
dfs_pls = plspm(Data=traits_dfs_df, path_matrix=dfs_path, blocks=dfs_blocks, modes=dfs_modes, scaled=FALSE)
return(dfs_pls)
}
aest_pls = pls_dfs(aesthetic_df)
narr_pls = pls_dfs(narrative_df)
goal_pls = pls_dfs(objectives_df)
knit_plspm_results(aest_pls, "Aesthetic")
knit_plspm_results(narr_pls, "Narrative")
knit_plspm_results(goal_pls, "Goals")
all_pls = pls_dfs(traits_dfs_df = traits_dfs_df)
aest_pls = pls_dfs(aesthetic_df)
narr_pls = pls_dfs(narrative_df)
goal_pls = pls_dfs(objectives_df)
knit_plspm_results(all_pls, "All Scenario")
knit_plspm_results(aest_pls, "Aesthetic")
knit_plspm_results(narr_pls, "Narrative")
knit_plspm_results(goal_pls, "Goals")
tab = pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Goals Scenario",
type=9, color_lim = NULL)
knit_plspm_results(tab[[1]][["traits_dfs_pls"]], "Aesthetic")
knit_plspm_results(tab[[2]][["traits_dfs_pls"]], "Narrative")
knit_plspm_results(tab[[3]][["traits_dfs_pls"]], "Goals")
plspm_traits_dfs_value_adjusted_2 = function(traits_dfs_df){
traits_blocks = list(c(15,16,18,19), 25:29, 20:24, 30:33, 10:14)
dfs_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9))
traits_dfs_blocks = as.list(append(traits_blocks, dfs_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = read.csv(paste(model_path, "path_inner_model_adjusted_eng.csv", sep=''), header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:14]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
tab = pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Goals Scenario",
type=9, color_lim = NULL)
knit_plspm_results(tab[[1]][["traits_dfs_pls"]], "Aesthetic")
knit_plspm_results(tab[[2]][["traits_dfs_pls"]], "Narrative")
knit_plspm_results(tab[[3]][["traits_dfs_pls"]], "Goals")
plspm_traits_dfs_value_adjusted_2 = function(traits_dfs_df){
traits_blocks = list(c(15,16,19), 25:29, 20:24, 30:33, 10:14)
dfs_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9))
traits_dfs_blocks = as.list(append(traits_blocks, dfs_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = read.csv(paste(model_path, "path_inner_model_adjusted_eng.csv", sep=''), header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:14]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
tab = pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Goals Scenario",
type=9, color_lim = NULL)
knit_plspm_results(tab[[1]][["traits_dfs_pls"]], "Aesthetic")
knit_plspm_results(tab[[2]][["traits_dfs_pls"]], "Narrative")
knit_plspm_results(tab[[3]][["traits_dfs_pls"]], "Goals")
all_engagement_data  = sem_engagement_data(traits_dfs_df)
aest_engagement_data = sem_engagement_data(aesthetic_df)
goal_engagement_data = sem_engagement_data(objectives_df)
narr_engagement_data = sem_engagement_data(narrative_df)
engagement_model <- '
# measurement model
Engagement =~ ENG1 + ENG2 + ENG3 + ENG4 + ENG5 + ENG6
'
all_fit_engagement_model <- sem(engagement_model, data=all_engagement_data)
summary(all_fit_engagement_model, standardized=TRUE, fit.measures=TRUE)
aest_fit_engagement_model <- sem(engagement_model, data=aest_engagement_data)
summary(aest_fit_engagement_model, standardized=TRUE, fit.measures=TRUE)
engagement_model <- '
# measurement model
Engagement =~ ENG1 + ENG2 + ENG3 + ENG4 + ENG5
'
all_fit_engagement_model <- sem(engagement_model, data=all_engagement_data)
summary(all_fit_engagement_model, standardized=TRUE, fit.measures=TRUE)
engagement_model <- '
# measurement model
Engagement =~ ENG1 + ENG2 + ENG3 + ENG4
'
all_fit_engagement_model <- sem(engagement_model, data=all_engagement_data)
summary(all_fit_engagement_model, standardized=TRUE, fit.measures=TRUE)
engagement_model <- '
# measurement model
Engagement =~ ENG1 + ENG2 + ENG3 + ENG4 + ENG5 + ENG6
'
all_fit_engagement_model <- sem(engagement_model, data=all_engagement_data)
summary(all_fit_engagement_model, standardized=TRUE, fit.measures=TRUE)
traits_flow_model <- '
# Traits Measurement Model
Aesthetic =~ AEST1 + AEST2 + AEST5
Challenge =~ CHAL1 + CHAL3 + CHAL4 + CHAL5
Goals =~ GOAL1 + GOAL3 + GOAL4 + GOAL5
Narrative =~ NARR1 + NARR2 + NARR3 + NARR4
Social =~ SOCI1 + SOCI2 + SOCI3 + SOCI4
# Flow Measurement Model
Chal.Skill.Balance =~ CSB1 + CSB2 + CSB3 + CSB4
Action.Awareness =~ AA1 + AA2 + AA3 + AA4
Clear.Goals =~ CG1 + CG2 + CG3 + CG4
Unambiguous.Feedback =~ UF1 + UF2 + UF3 + UF4
Concentration =~ CNT1 + CNT2 + CNT3 + CNT4
Sense.of.Control =~ SOC1 + SOC2 + SOC3 + SOC4
Loss.Self.Consciousness =~ LSC1 + LSC2 + LSC3 + LSC4
Time.Transformation =~ TT1 + TT2 + TT3 + TT4
Autotelic.Experience =~ AE1 + AE2 + AE3 + AE4
# Regression
Chal.Skill.Balance ~ Aesthetic + Challenge + Goals + Narrative + Social
Action.Awareness ~ Aesthetic + Challenge + Goals + Narrative + Social
Clear.Goals ~ Aesthetic + Challenge + Goals + Narrative + Social
Unambiguous.Feedback ~ Aesthetic + Challenge + Goals + Narrative + Social
Concentration ~ Aesthetic + Challenge + Goals + Narrative + Social
Sense.of.Control ~ Aesthetic + Challenge + Goals + Narrative + Social
Loss.Self.Consciousness ~ Aesthetic + Challenge + Goals + Narrative + Social
Time.Transformation ~ Aesthetic + Challenge + Goals + Narrative + Social
Autotelic.Experience ~ Aesthetic + Challenge + Goals + Narrative + Social
'
all_traits_flow_data = rbind(cbind(traits_data, aest_flow_data), cbind(traits_data, goal_flow_data), cbind(traits_data, narr_flow_data))
all_fit_traits_flow_model <- sem(traits_flow_model, data=all_traits_flow_data)
summary(all_fit_traits_flow_model, standardized=TRUE, fit.measures=TRUE)
layout(matrix(c(1,2,
3,4,
5), 1, 5, byrow = TRUE))
hist(aesthetic_df$aesthetic, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Aesthetic Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$aesthetic)$p.value, 3)), line = -2)
hist(aesthetic_df$challenge, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Challenge Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$challenge)$p.value, 3)), line = -2)
hist(aesthetic_df$narrative, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Narration Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$narrative)$p.value, 3)), line = -2)
hist(aesthetic_df$objectives, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Objectives Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$objectives)$p.value, 3)), line = -2)
hist(aesthetic_df$social, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Social Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$social)$p.value, 3)), line = -2)
mtext("All Participants", line = -1, side=4, outer = TRUE)
hist(aesthetic_df$aesthetic, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Aesthetic Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$aesthetic)$p.value, 3)), line = -2)
hist(aesthetic_df$challenge, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Challenge Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$challenge)$p.value, 3)), line = -2)
hist(aesthetic_df$aesthetic, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Aesthetic Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$aesthetic)$p.value, 3)), line = -2)
hist(aesthetic_df$narrative, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Narration Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$narrative)$p.value, 3)), line = -2)
hist(aesthetic_df$objectives, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Objectives Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$objectives)$p.value, 3)), line = -2)
hist(aesthetic_df$social, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Social Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$social)$p.value, 3)), line = -2)
hist(aesthetic_df$aesthetic, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Aesthetic Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$aesthetic)$p.value, 3)), line = -2)
hist(aesthetic_df$challenge, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Challenge Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$challenge)$p.value, 3)), line = -2)
hist(aesthetic_df$narrative, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Narration Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$narrative)$p.value, 3)), line = -2)
hist(aesthetic_df$objectives, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="Objectives Score")
mtext(paste("Shapiro-Wilk normality test", round(shapiro.test(aesthetic_df$objectives)$p.value, 3)), line = -2)
tab = pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Goals Scenario",
type=9, color_lim = NULL)
knit_plspm_results(tab[[1]][["traits_dfs_pls"]], "Aesthetic")
knit_plspm_results(tab[[2]][["traits_dfs_pls"]], "Narrative")
knit_plspm_results(tab[[3]][["traits_dfs_pls"]], "Goals")
tab[[1]][["traits_dfs_pls"]]
View(tab[[1]][["traits_dfs_pls"]])
tab[[1]][["traits_dfs_pls"]][["effects"]]
tab[[1]][["traits_dfs_pls"]][["crossloadings"]]
scenario_ggbp = function(dimension=""){
scenario_df = cbind(traits_dfs_df[[dimension]], traits_dfs_df[["qu.avez.vous.vu.lors.de.l.experience.."]])
colnames(scenario_df) = c("Score", "Scenario")
scenario_df = as.data.frame(scenario_df)
scenario_df = mutate(scenario_df, Score=as.integer(Score))
scenario_df = mutate(scenario_df, Scenario=str_replace(Scenario, "Des portails", "Aesthetic"))
scenario_df = mutate(scenario_df, Scenario=str_replace(Scenario, "Des zombies", "Goals"))
scenario_df = mutate(scenario_df, Scenario=str_replace(Scenario, "Les recherches d'Isidore", "Narrative"))
scenario_comparison <- list(c("Aesthetic", "Narrative"), c("Aesthetic", "Goals"), c("Narrative", "Goals"))
ggboxplot(scenario_df, x = "Scenario", y = "Score",
color = "Scenario", palette = "jco", ylim = c(0, 28))+
stat_compare_means(comparisons = scenario_comparison,
label.y = c(0, 1, 2), tip.length = c(-0.02, -0.02, -0.02),
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
#return(compare_means(Score ~ Scenario,  data = scenario_df))
}
scenario_ggbp("action_awareness")
order_ggbp("action_awareness")
order_ggbp("concentration")
order_ggbp("unambiguous_feedback")
matrix(x)
matrix(1)
pls_eng = function(traits_dfs_df){
eng_blocks = list(c(78:83))
eng_modes = rep("A", 1)
eng_path = matrix(1)
eng_pls = plspm(Data=traits_dfs_df, path_matrix=eng_path, blocks=eng_blocks, modes=eng_modes, scaled=FALSE)
return(eng_pls)
}
pls_eng(aesthetic_df)
dfs_eng_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9),
c(78:83))
dfs_eng_blocks
pls_dfs_eng = function(traits_dfs_df){
dfs_eng_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9),
c(78:83))
dfs_eng_modes = rep("A", 10)
csb = c(1,0,0,0,0,0,0,0,0,0)
aa  = c(1,1,0,0,0,0,0,0,0,0)
cg  = c(1,1,1,0,0,0,0,0,0,0)
uf  = c(1,1,1,1,0,0,0,0,0,0)
cnt = c(1,1,1,1,1,0,0,0,0,0)
soc = c(1,1,1,1,1,1,0,0,0,0)
lsc = c(1,1,1,1,1,1,1,0,0,0)
tt  = c(1,1,1,1,1,1,1,1,0,0)
ae  = c(1,1,1,1,1,1,1,1,1,0)
eng = c(1,1,1,1,1,1,1,1,1,1)
dfs_eng_path = rbind(csb, aa, cg, uf, cnt, soc, lsc, tt, ae, eng)
dfs_eng_pls = plspm(Data=traits_dfs_df, path_matrix=dfs_path, blocks=dfs_blocks, modes=dfs_modes, scaled=FALSE)
return(dfs_eng_pls)
}
pls_dfs_eng(traits_dfs_df = traits_dfs_df)
pls_dfs_eng = function(traits_dfs_df){
dfs_eng_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9),
c(78:83))
dfs_eng_modes = rep("A", 10)
csb = c(1,0,0,0,0,0,0,0,0,0)
aa  = c(1,1,0,0,0,0,0,0,0,0)
cg  = c(1,1,1,0,0,0,0,0,0,0)
uf  = c(1,1,1,1,0,0,0,0,0,0)
cnt = c(1,1,1,1,1,0,0,0,0,0)
soc = c(1,1,1,1,1,1,0,0,0,0)
lsc = c(1,1,1,1,1,1,1,0,0,0)
tt  = c(1,1,1,1,1,1,1,1,0,0)
ae  = c(1,1,1,1,1,1,1,1,1,0)
eng = c(1,1,1,1,1,1,1,1,1,1)
dfs_eng_path = rbind(csb, aa, cg, uf, cnt, soc, lsc, tt, ae, eng)
dfs_eng_pls = plspm(Data=traits_dfs_df, path_matrix=dfs_eng_path, blocks=dfs_eng_blocks, modes=dfs_eng_modes, scaled=FALSE)
return(dfs_eng_pls)
}
pls_dfs_eng(traits_dfs_df = traits_dfs_df)
a = pls_dfs_eng(traits_dfs_df = traits_dfs_df)
a$outer_model
all_pls = pls_dfs_eng(traits_dfs_df = traits_dfs_df)
aest_pls = pls_dfs_eng(aesthetic_df)
narr_pls = pls_dfs_eng(narrative_df)
goal_pls = pls_dfs_eng(objectives_df)
knit_plspm_results(all_pls, "All Scenario")
knit_plspm_results(aest_pls, "Aesthetic")
knit_plspm_results(narr_pls, "Narrative")
knit_plspm_results(goal_pls, "Goals")
pls_dfs_eng = function(traits_dfs_df){
dfs_eng_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9),
c(78:81),
c(82,83))
dfs_eng_modes = rep("A", 10)
csb   = c(1,0,0,0,0,0,0,0,0,0,0)
aa    = c(1,1,0,0,0,0,0,0,0,0,0)
cg    = c(1,1,1,0,0,0,0,0,0,0,0)
uf    = c(1,1,1,1,0,0,0,0,0,0,0)
cnt   = c(1,1,1,1,1,0,0,0,0,0,0)
soc   = c(1,1,1,1,1,1,0,0,0,0,0)
lsc   = c(1,1,1,1,1,1,1,0,0,0,0)
tt    = c(1,1,1,1,1,1,1,1,0,0,0)
ae    = c(1,1,1,1,1,1,1,1,1,0,0)
eng_1 = c(1,1,1,1,1,1,1,1,1,1,0)
eng_2 = c(1,1,1,1,1,1,1,1,1,1,1)
dfs_eng_path = rbind(csb, aa, cg, uf, cnt, soc, lsc, tt, ae, eng)
dfs_eng_pls = plspm(Data=traits_dfs_df, path_matrix=dfs_eng_path, blocks=dfs_eng_blocks, modes=dfs_eng_modes, scaled=FALSE)
return(dfs_eng_pls)
}
all_pls = pls_dfs_eng(traits_dfs_df = traits_dfs_df)
pls_dfs_eng = function(traits_dfs_df){
dfs_eng_blocks = list(seq.int(from=42, length.out=4, by=9),
seq.int(from=43, length.out=4, by=9),
seq.int(from=44, length.out=4, by=9),
seq.int(from=45, length.out=4, by=9),
seq.int(from=46, length.out=4, by=9),
seq.int(from=47, length.out=4, by=9),
seq.int(from=48, length.out=4, by=9),
seq.int(from=49, length.out=4, by=9),
seq.int(from=50, length.out=4, by=9),
c(78:81),
c(82,83))
dfs_eng_modes = rep("A", 11)
csb   = c(1,0,0,0,0,0,0,0,0,0,0)
aa    = c(1,1,0,0,0,0,0,0,0,0,0)
cg    = c(1,1,1,0,0,0,0,0,0,0,0)
uf    = c(1,1,1,1,0,0,0,0,0,0,0)
cnt   = c(1,1,1,1,1,0,0,0,0,0,0)
soc   = c(1,1,1,1,1,1,0,0,0,0,0)
lsc   = c(1,1,1,1,1,1,1,0,0,0,0)
tt    = c(1,1,1,1,1,1,1,1,0,0,0)
ae    = c(1,1,1,1,1,1,1,1,1,0,0)
eng_1 = c(1,1,1,1,1,1,1,1,1,1,0)
eng_2 = c(1,1,1,1,1,1,1,1,1,1,1)
dfs_eng_path = rbind(csb, aa, cg, uf, cnt, soc, lsc, tt, ae, eng_1, eng_2)
dfs_eng_pls = plspm(Data=traits_dfs_df, path_matrix=dfs_eng_path, blocks=dfs_eng_blocks, modes=dfs_eng_modes, scaled=FALSE)
return(dfs_eng_pls)
}
all_pls = pls_dfs_eng(traits_dfs_df = traits_dfs_df)
aest_pls = pls_dfs_eng(aesthetic_df)
narr_pls = pls_dfs_eng(narrative_df)
goal_pls = pls_dfs_eng(objectives_df)
knit_plspm_results(all_pls, "All Scenario")
knit_plspm_results(aest_pls, "Aesthetic")
knit_plspm_results(narr_pls, "Narrative")
knit_plspm_results(goal_pls, "Goals")
