list(mean = mean, sd = sd, min = min, max = max)))
summarise_aesthetic <- summarise(traits_join_DFS_Aesthetic, across(c("Challenge-Skill Balance (S)", "Action Awareness (A)", "Clear Goals (G)",
"Unambiguous Feedback (U)", "Concentration (C)", "Sense of Control (O)",
"Loss of Self-Consciousness (L)", "Time Transformation (T)", "Autotelic experience (X)"),
list(mean = mean, sd = sd, min = min, max = max)))
summarise_narrative <- summarise(traits_join_DFS_Narrative, across(c("Challenge-Skill Balance (S)", "Action Awareness (A)", "Clear Goals (G)",
"Unambiguous Feedback (U)", "Concentration (C)", "Sense of Control (O)",
"Loss of Self-Consciousness (L)", "Time Transformation (T)", "Autotelic experience (X)"),
list(mean = mean, sd = sd, min = min, max = max)))
summarise_traits <- summarise(traits_join_DFS_Objective, across(c("Score Défi", "Score Esthétique", "Score Narratif", "Score Social", "Score Objectifs"), list(mean = mean, sd = sd, min = min, max = max)))
source("LoadData.R",encoding="utf-8")
# Correlations computation for objective scenario
correlations_objective <- setNames(data.frame(matrix(ncol = 10, nrow = 0)), c("Trait", "S","A", "G", "U", "C", "O", "L", "TT", "X"))
correlations_objective[, c(2:10)] <- sapply(correlations_objective[, c(2:10)], as.numeric)
correlations_objective$Trait <- as.character(correlations_objective$Trait)
correlations_objective_p <- setNames(data.frame(matrix(ncol = 10, nrow = 0)), c("Trait", "S","A", "G", "U", "C", "O", "L", "TT", "X"))
correlations_objective_p[, c(2:10)] <- sapply(correlations_objective_p[, c(2:10)], as.numeric)
correlations_objective_p$Trait <- as.character(correlations_objective_p$Trait)
for(i in 0:4){
trait_correlations <- c()
trait_correlations_p <- c()
for(j in 0:8){
trait_correlations <- c(trait_correlations, cor(traits_join_DFS_Objective[36+i], traits_join_DFS_Objective[90+j]))
trait_correlations_p <- c(trait_correlations_p, cor.test(traits_join_DFS_Objective[[36+i]], traits_join_DFS_Objective[[90+j]])$p.value)
}
correlations_objective <- add_row(correlations_objective, Trait=colnames(traits_join_DFS_Objective[36+i]), S=trait_correlations[1], A=trait_correlations[2],
G=trait_correlations[3], U=trait_correlations[4], C=trait_correlations[5], O=trait_correlations[6], L=trait_correlations[7],
TT=trait_correlations[8], X=trait_correlations[9])
correlations_objective_p <- add_row(correlations_objective_p, Trait=colnames(traits_join_DFS_Objective[36+i]), S=trait_correlations_p[1], A=trait_correlations_p[2],
G=trait_correlations_p[3], U=trait_correlations_p[4], C=trait_correlations_p[5], O=trait_correlations_p[6], L=trait_correlations_p[7],
TT=trait_correlations_p[8], X=trait_correlations_p[9])
}
# Correlations computation for narrative scenario
correlations_narrative <- setNames(data.frame(matrix(ncol = 10, nrow = 0)), c("Trait", "S","A", "G", "U", "C", "O", "L", "TT", "X"))
correlations_narrative[, c(2:10)] <- sapply(correlations_narrative[, c(2:10)], as.numeric)
correlations_narrative$Trait <- as.character(correlations_narrative$Trait)
correlations_narrative_p <- setNames(data.frame(matrix(ncol = 10, nrow = 0)), c("Trait", "S","A", "G", "U", "C", "O", "L", "TT", "X"))
correlations_narrative_p[, c(2:10)] <- sapply(correlations_narrative_p[, c(2:10)], as.numeric)
correlations_narrative_p$Trait <- as.character(correlations_narrative_p$Trait)
for(i in 0:4){
trait_correlations <- c()
trait_correlations_p <- c()
for(j in 0:8){
trait_correlations <- c(trait_correlations, cor(traits_join_DFS_Narrative[36+i], traits_join_DFS_Narrative[90+j]))
trait_correlations_p <- c(trait_correlations_p, cor.test(traits_join_DFS_Narrative[[36+i]], traits_join_DFS_Narrative[[90+j]])$p.value)
}
correlations_narrative <- add_row(correlations_narrative, Trait=colnames(traits_join_DFS_Narrative[36+i]), S=trait_correlations[1], A=trait_correlations[2],
G=trait_correlations[3], U=trait_correlations[4], C=trait_correlations[5], O=trait_correlations[6], L=trait_correlations[7],
TT=trait_correlations[8], X=trait_correlations[9])
correlations_narrative_p <- add_row(correlations_narrative_p, Trait=colnames(traits_join_DFS_Narrative[36+i]), S=trait_correlations_p[1], A=trait_correlations_p[2],
G=trait_correlations_p[3], U=trait_correlations_p[4], C=trait_correlations_p[5], O=trait_correlations_p[6], L=trait_correlations_p[7],
TT=trait_correlations_p[8], X=trait_correlations_p[9])
}
# Correlations computation for aesthetic scenario
correlations_aesthetic <- setNames(data.frame(matrix(ncol = 10, nrow = 0)), c("Trait", "S","A", "G", "U", "C", "O", "L", "TT", "X"))
correlations_aesthetic[, c(2:10)] <- sapply(correlations_aesthetic[, c(2:10)], as.numeric)
correlations_aesthetic$Trait <- as.character(correlations_aesthetic$Trait)
correlations_aesthetic_p <- setNames(data.frame(matrix(ncol = 10, nrow = 0)), c("Trait", "S","A", "G", "U", "C", "O", "L", "TT", "X"))
correlations_aesthetic_p[, c(2:10)] <- sapply(correlations_aesthetic_p[, c(2:10)], as.numeric)
correlations_aesthetic_p$Trait <- as.character(correlations_aesthetic_p$Trait)
for(i in 0:4){
trait_correlations <- c()
trait_correlations_p <- c()
for(j in 0:8){
trait_correlations <- c(trait_correlations, cor(traits_join_DFS_Aesthetic[36+i], traits_join_DFS_Aesthetic[90+j]))
trait_correlations_p <- c(trait_correlations_p, cor.test(traits_join_DFS_Aesthetic[[36+i]], traits_join_DFS_Aesthetic[[90+j]])$p.value)
}
correlations_aesthetic <- add_row(correlations_aesthetic, Trait=colnames(traits_join_DFS_Aesthetic[36+i]), S=trait_correlations[1], A=trait_correlations[2],
G=trait_correlations[3], U=trait_correlations[4], C=trait_correlations[5], O=trait_correlations[6], L=trait_correlations[7],
TT=trait_correlations[8], X=trait_correlations[9])
correlations_aesthetic_p <- add_row(correlations_aesthetic_p, Trait=colnames(traits_join_DFS_Aesthetic[36+i]), S=trait_correlations_p[1], A=trait_correlations_p[2],
G=trait_correlations_p[3], U=trait_correlations_p[4], C=trait_correlations_p[5], O=trait_correlations_p[6], L=trait_correlations_p[7],
TT=trait_correlations_p[8], X=trait_correlations_p[9])
}
summarise_traits <- summarise(traits_join_DFS_Objective, across(c("Score Défi", "Score Esthétique", "Score Narratif", "Score Social", "Score Objectifs"), list(mean = mean, sd = sd, min = min, max = max)))
summarise_objective <- summarise(traits_join_DFS_Objective, across(c("Challenge-Skill Balance (S)", "Action Awareness (A)", "Clear Goals (G)",
"Unambiguous Feedback (U)", "Concentration (C)", "Sense of Control (O)",
"Loss of Self-Consciousness (L)", "Time Transformation (T)", "Autotelic experience (X)"),
list(mean = mean, sd = sd, min = min, max = max)))
summarise_aesthetic <- summarise(traits_join_DFS_Aesthetic, across(c("Challenge-Skill Balance (S)", "Action Awareness (A)", "Clear Goals (G)",
"Unambiguous Feedback (U)", "Concentration (C)", "Sense of Control (O)",
"Loss of Self-Consciousness (L)", "Time Transformation (T)", "Autotelic experience (X)"),
list(mean = mean, sd = sd, min = min, max = max)))
summarise_narrative <- summarise(traits_join_DFS_Narrative, across(c("Challenge-Skill Balance (S)", "Action Awareness (A)", "Clear Goals (G)",
"Unambiguous Feedback (U)", "Concentration (C)", "Sense of Control (O)",
"Loss of Self-Consciousness (L)", "Time Transformation (T)", "Autotelic experience (X)"),
list(mean = mean, sd = sd, min = min, max = max)))
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
#### Personnality Traits
# Create dataframe from excel sheets
traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
# Reverse answers for questions marked with "[R]" (likert 7)
for(i in 1:length(traits)){
if(grepl("[R]", colnames(traits[i]))){
traits[i] <- 8 - traits[i]
}
}
# Compute traits
traits <-mutate(rowwise(traits), aesthetic=ceiling(sum(c_across(15:19), -5) * 100/30))
traits <-mutate(rowwise(traits), challenge=ceiling(sum(c_across(25:29), -5) * 100/30))
traits <-mutate(rowwise(traits), narrative=ceiling(sum(c_across(20:24), -5) * 100/30))
traits <-mutate(rowwise(traits), objectives=ceiling(sum(c_across(30:34), -5) * 100/30))
traits <-mutate(rowwise(traits), social=ceiling(sum(c_across(10:14), -5) * 100/30))
traits <- rename_all(traits, make.names)
colnames(traits) = stri_trans_general(tolower(colnames(traits)), "Latin-ASCII")
# Erase test data (from before 21st of May)
traits <- filter(traits, horodateur >= "2021-05-21")
traits <- filter(traits, !identifiant.participant %in% c(8, 9, 12, 13, 21, 23, 27, 31, 33, 36, 54, 27))
# Erase double from data
traits <- distinct(traits, adresse.e.mail, .keep_all = TRUE)
# Lower and remove accents from all names
traits$quel.est.votre.prenom.. <- stri_trans_general(tolower(traits$quel.est.votre.prenom..), "Latin-ASCII")
traits$quel.est.votre.nom.de.famille.. <- stri_trans_general(tolower(traits$quel.est.votre.nom.de.famille..), "Latin-ASCII")
#### Flow and Presence Questionnaires
# Create dataframe from excel sheets
dfs_tpi <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
dfs_tpi <- rename_all(dfs_tpi, make.names)
colnames(dfs_tpi) = stri_trans_general(tolower(colnames(dfs_tpi)), "Latin-ASCII")
# Compute flow and engagement scores
dfs_tpi <- mutate(rowwise(dfs_tpi), challenge_skill_balance=sum(c_across(seq.int(from=2, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), action_awareness=sum(c_across(seq.int(from=3, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), clear_goals=sum(c_across(seq.int(from=4, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), unambiguous_feedback=sum(c_across(seq.int(from=5, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), concentration=sum(c_across(seq.int(from=6, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), sense_of_control=sum(c_across(seq.int(from=7, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), loss_self_consciousness=sum(c_across(seq.int(from=8, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), time_transformation=sum(c_across(seq.int(from=9, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), autotelic_experience=sum(c_across(seq.int(from=10, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), engagement=sum(c_across(38:43))/6)
# Erase test data (from before 25th of May)
dfs_tpi <- filter(dfs_tpi, horodateur >= "2021-05-25")
# Lower and remove accents from all names
dfs_tpi$quel.est.votre.prenom.. <- stri_trans_general(tolower(dfs_tpi$quel.est.votre.prenom..), "Latin-ASCII")
dfs_tpi$quel.est.votre.nom.de.famille.. <- stri_trans_general(tolower(dfs_tpi$quel.est.votre.nom.de.famille..), "Latin-ASCII")
#### Experiments Time
exp_times = read.csv(file="temps_xp.csv")
exp_times[2:7] = lapply(exp_times[2:7], as.character)
exp_times[2:7] = lapply(exp_times[2:7], as.ITime)
exp_times["aesthetic_duration"] = exp_times$aesthetic_end - exp_times$aesthetic_begin
exp_times["narrative_duration"] = exp_times$narrative_end - exp_times$narrative_begin
exp_times["goals_duration"] = exp_times$goals_end - exp_times$goals_begin
exp_durations = data.frame(Aesthetic_Duration=exp_times[8], Narrative_Duration=exp_times[9], Goals_Duration=exp_times[10])
sum_durations = summary(exp_durations)
#### Join
traits_dfs_df <- inner_join(traits, dfs_tpi, by=c("quel.est.votre.nom.de.famille..", "quel.est.votre.prenom.."))
# Separate data depending on scenario
objectives_df <- filter(traits_dfs_df, qu.avez.vous.vu.lors.de.l.experience.. == "Des zombies")
narrative_df <- filter(traits_dfs_df, qu.avez.vous.vu.lors.de.l.experience.. == "Les recherches d'Isidore")
aesthetic_df <- filter(traits_dfs_df, qu.avez.vous.vu.lors.de.l.experience.. == "Des portails")
# Separate data depending on order
first_df = filter(traits_dfs_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Première")
second_df = filter(traits_dfs_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Deuxième")
third_df = filter(traits_dfs_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Troisième")
# Separate data depending on scenario AND order
aesthetic_first = filter(aesthetic_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Première")
aesthetic_second = filter(aesthetic_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Deuxième")
aesthetic_third = filter(aesthetic_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Troisième")
narrative_first = filter(narrative_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Première")
narrative_second = filter(narrative_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Deuxième")
narrative_third = filter(narrative_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Troisième")
objectives_first = filter(objectives_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Première")
objectives_second = filter(objectives_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Deuxième")
objectives_third = filter(objectives_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "Troisième")
# Separate data depending on site
enise_df = filter(traits_dfs_df, sur.quel.site.allez.vous.participer.a.l.experimentation.. == "ENISE (Saint-Etienne)")
insa_df = filter(traits_dfs_df, sur.quel.site.allez.vous.participer.a.l.experimentation.. == "INSA Lyon")
# Separate data depending on site AND scenario ??
# Separate data depending on game experience
nevergame_bf = filter(traits_dfs_df, a.quelle.frequence.jouez.vous.aux.jeux.videos.. == "Jamais")
lowgame_bf = filter(traits_dfs_df, a.quelle.frequence.jouez.vous.aux.jeux.videos.. == "Occasionnellement")
midgame_bf = filter(traits_dfs_df, a.quelle.frequence.jouez.vous.aux.jeux.videos.. == "Régulièrement")
highgame_bf = filter(traits_dfs_df, a.quelle.frequence.jouez.vous.aux.jeux.videos.. == "Tous les jours")
dimension = "unambiguous_feedback"
data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]])
corrplot::corrplot(data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]]))
cor(data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]]))
cor.test(data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]]))
cor.test(objectives_df[dimension], aesthetic_df[dimension])
rcorr(data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]]))
rcorr(as.matrix(data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]])))
library(Hmisc)
rcorr(as.matrix(data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]])))
dimension_corr = function(dimension){
print("Correlation between scenarios in " + dimension)
rcorr(as.matrix(data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]])))
}
dimension_corr = function(scenario_df){
print("Correlation between dimensions in scenario : " + scenario)
rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr(aesthetic_df)
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print("Correlation between dimensions in scenario : " + scenario)
rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corrplot(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
library(corrplot)
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corrplot(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr("Aesthetic", aesthetic_df)
clear
clean
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corrplot(rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
))))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corrplot(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corrplot(corr=FALSE,as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corrplot(method="circle",corr=FALSE,as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corrplot(method="color",corr=FALSE,as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
}
dimension_corr("Aesthetic", aesthetic_df)
dimension_corr("Narrative", narrative_df)
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corr_matrix = rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
return(corr_matrix)
}
dimension_corr("Narrative", narrative_df)
narrative_corr = dimension_corr("Narrative", narrative_df)
narrative_corr
aesthetic_corr = dimension_corr("Aesthetic", aesthetic_df)
goals_corr = dimension_corr("Goals", objectives_df)
goals_corr
goals_corr[c("challenge_skill_balance", "clear_goals", "unambiguous_feedback")]
goals_corr[[c("challenge_skill_balance", "clear_goals", "unambiguous_feedback")]]
goals_corr[1]
goals_corr[1]
goals_corr[2]
goals_corr[3]
goals_corr[4]
goals_corr[5]
goals_corr[4]
goals_corr$r[1]
goals_corr$r
goals_corr$r[[1]]
goals_corr$r["challenge_skill_balance"]
class(goals_corr$r)
matrix_test = goals_corr$r
matrix_test["sense_of_control"]
matrix_test[1]
matrix_test[2]
matrix_test[[2]]
matrix_test[[1]]
matrix_test[[]1]
matrix_test[1,[]]
matrix_test[1,
matrix_test[1,]
matrix_test[1,2]
matrix_test[]
matrix_test[][]
matrix_test[][1]
matrix_test[1][]
matrix_test[1,]
matrix_test[,1]
matrix_test[c(1,2,3),]
matrix_test[c(1,2,3),c(1,2,3)]
matrix_test[c(1,3,4),c(1,3,4)]
lower(matrix_test[c(1,3,4),c(1,3,4)])
lower.matrix_test[c(1,3,4),c(1,3,4)]
lower.triangle(matrix_test[c(1,3,4),c(1,3,4)])
lower.tri(matrix_test[c(1,3,4),c(1,3,4)])
which(upper.tri(matrix_test, diag=FALSE), arr.ind=TRUE)
upper.tri(matrix_test, diag=FALSE)
lower.tri(matrix_test, diag=FALSE)
library(rquery)
source("http://www.sthda.com/upload/rquery_cormat.r")
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corr_matrix = rquery.cormat(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
return(corr_matrix)
}
aesthetic_corr = dimension_corr("Aesthetic", aesthetic_df)
aesthetic_corr$r
aesthetic_corr$r
aesthetic_corr$p
aesthetic_corr
aesthetic_corr$r
aesthetic_corr$
aesthetic_corr$p
aesthetic_corr$p
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corr_matrix = rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
return(corr_matrix)
}
dimension_corr = function(scenario, scenario_df){
print(paste("Correlation between dimensions in scenario : ", scenario))
corr_matrix = rcorr(as.matrix(data.frame(challenge_skill_balance=scenario_df[["challenge_skill_balance"]],
action_awareness=scenario_df[["action_awareness"]],
clear_goals=scenario_df[["clear_goals"]],
unambiguous_feedback=scenario_df[["unambiguous_feedback"]],
concentration=scenario_df[["concentration"]],
sense_of_control=scenario_df[["sense_of_control"]],
loss_self_consciousness=scenario_df[["loss_self_consciousness"]],
time_transformation=scenario_df[["time_transformation"]],
autotelic_experience=scenario_df[["autotelic_experience"]],
engagement=scenario_df[["engagement"]]
)))
return(corr_matrix)
}
aesthetic_corr = dimension_corr("Aesthetic", aesthetic_df)
aesthetic_corr
