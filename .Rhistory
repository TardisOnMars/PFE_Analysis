View(X5_Traits)
# Create dataframe from excel sheets
X5_Traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
DFS_TPI <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
# Erase test data (from before 21st of May)
X5_Traits <- filter(X5_Traits, X5_Traits$Horodateur >= "2021-05-21")
view(distinct(X5_Traits, X5_Traits$`Adresse e-mail`, .keep_all = TRUE))
View(distinct(X5_Traits, X5_Traits$`Adresse e-mail`, .keep_all = TRUE))
View(distinct(X5_Traits, X5_Traits$`Adresse e-mail`))
?distinct
View(distinct(X5_Traits, `Adresse e-mail`))
View(distinct(X5_Traits, `Adresse e-mail`), .keep_all = TRUE)
View(distinct(X5_Traits, `Adresse e-mail`), .keep_all = TRUE))
View(distinct(X5_Traits, `Adresse e-mail`, .keep_all = TRUE))
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
# Create dataframe from excel sheets
X5_Traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
DFS_TPI <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
# Erase test data (from before 21st of May)
X5_Traits <- filter(X5_Traits, X5_Traits$Horodateur >= "2021-05-21")
# Erase double from data
X5_Traits <- distinct(X5_Traits, `Adresse e-mail`, .keep_all = TRUE)
View(DFS_TPI)
View(X5_Traits)
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
# Create dataframe from excel sheets
X5_Traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
DFS_TPI <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
# Erase test data (from before 21st of May)
X5_Traits <- filter(X5_Traits, X5_Traits$Horodateur >= "2021-05-21")
# Erase double from data
X5_Traits <- distinct(X5_Traits, `Adresse e-mail`, .keep_all = TRUE)
# Lower and remove accents from all names
X5_Traits$`Quel est votre prénom ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre prénom ?`), "Latin-ASCII")
X5_Traits$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre nom de famille ?`), "Latin-ASCII")
# Erase test data (from before 25th of May)
DFS_TPI <- filter(DFS_TPI, DFS_TPI$Horodateur >= "2021-05-25")
# Lower and remove accents from all names
DFS_TPI$`Quel est votre prénom ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre prénom ?`), "Latin-ASCII")
DFS_TPI$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre nom de famille ?`), "Latin-ASCII")
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by=c("Quel est votre nom de famille ?", "Quel est votre prénom ?"))
View(traits_join_DFS)
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by=`Adresse e-mail`)
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by="Adresse e-mail")
View(X5_Traits)
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by=c("Adresse e-mail"))
View(DFS_TPI)
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by=c("Quel est votre nom de famille ?", "Quel est votre prénom ?"))
View(traits_join_DFS)
traits_join_DFS_Objective <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des zombies")
traits_join_DFS_Narrative <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Les recherches d'Isidore")
traits_join_DFS_Aesthetic <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des portails")
source(LoadData.R)
source(LoadData)
source("LoadData.R")
source("LoadData.R")
source("LoadData.R")
source("LoadData.R",encoding="utf-8")
?summary
summary(X5_Traits)
summary(X5_Traits)$`Quel est votre âge ? (Exemple : 21)`
summary(X5_Traits)[1]
summary(X5_Traits)[[1]]
summary(X5_Traits)[,1
summary(X5_Traits)[,1]
summary(X5_Traits)[,1]
summary(X5_Traits)[,2]
summary(X5_Traits)[,3]
summary(X5_Traits)[,4]
summary(X5_Traits)[,5]
hist(summary(X5_Traits)[,5])
hist(X5_Traits$`Quel est votre âge ? (Exemple : 21)`)
hist(X5_Traits, `Quel est votre âge ? (Exemple : 21)`)
hist(X5_Traits$`Quel est votre âge ? (Exemple : 21)`)
hist(traits_join_DFS_Objective$`Dans quelle mesure avez-vous ressenti une sensation de réalisme ?`
hist(traits_join_DFS_Objective$`Dans quelle mesure avez-vous ressenti une sensation de réalisme ?`)
hist(traits_join_DFS_Objective$`Dans quelle mesure avez-vous ressenti une sensation de réalisme ?`)
hist(X5_Traits$`Quel est votre âge ? (Exemple : 21)`, main="Distribution de l'âge des participants")
hist(X5_Traits$`Quel est votre âge ? (Exemple : 21)`, main="Distribution de l'âge des participants", breaks=1)
hist(X5_Traits$`Quel est votre âge ? (Exemple : 21)`, main="Distribution de l'âge des participants")
?contains
?grepl
grepl("[R]", X5_Traits[1,1])
X5_Traits[1,1]
colnames(X5_Traits)
colnames(X5_Traits[1])
8 - X5_Traits[5]
8 - X5_Traits[10]
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
# Create dataframe from excel sheets
X5_Traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
DFS_TPI <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
#### Personnality Traits
# Erase test data (from before 21st of May)
X5_Traits <- filter(X5_Traits, X5_Traits$Horodateur >= "2021-05-21")
# Erase double from data
X5_Traits <- distinct(X5_Traits, `Adresse e-mail`, .keep_all = TRUE)
# Lower and remove accents from all names
X5_Traits$`Quel est votre prénom ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre prénom ?`), "Latin-ASCII")
X5_Traits$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre nom de famille ?`), "Latin-ASCII")
for(i in 1:len(X5_Traits)){
if(grepl("[R]", colnames(X5_Traits[i]))){
X5_Traits[i] <- 8 - X5_Traits[i]
}
}
#### Flow and Presence Questionnaires
# Erase test data (from before 25th of May)
DFS_TPI <- filter(DFS_TPI, DFS_TPI$Horodateur >= "2021-05-25")
# Lower and remove accents from all names
DFS_TPI$`Quel est votre prénom ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre prénom ?`), "Latin-ASCII")
DFS_TPI$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre nom de famille ?`), "Latin-ASCII")
#### Join
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by=c("Quel est votre nom de famille ?", "Quel est votre prénom ?"))
# Separate data depending on scenario
traits_join_DFS_Objective <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des zombies")
traits_join_DFS_Narrative <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Les recherches d'Isidore")
traits_join_DFS_Aesthetic <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des portails")
length(X5_Traits)
length(X5_Traits[1])
length(X5_Traits[[1]])
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
# Create dataframe from excel sheets
X5_Traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
DFS_TPI <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
#### Personnality Traits
# Erase test data (from before 21st of May)
X5_Traits <- filter(X5_Traits, X5_Traits$Horodateur >= "2021-05-21")
# Erase double from data
X5_Traits <- distinct(X5_Traits, `Adresse e-mail`, .keep_all = TRUE)
# Lower and remove accents from all names
X5_Traits$`Quel est votre prénom ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre prénom ?`), "Latin-ASCII")
X5_Traits$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre nom de famille ?`), "Latin-ASCII")
for(i in 1:length(X5_Traits[[1]])){
if(grepl("[R]", colnames(X5_Traits[i]))){
X5_Traits[i] <- 8 - X5_Traits[i]
}
}
#### Flow and Presence Questionnaires
# Erase test data (from before 25th of May)
DFS_TPI <- filter(DFS_TPI, DFS_TPI$Horodateur >= "2021-05-25")
# Lower and remove accents from all names
DFS_TPI$`Quel est votre prénom ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre prénom ?`), "Latin-ASCII")
DFS_TPI$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre nom de famille ?`), "Latin-ASCII")
#### Join
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by=c("Quel est votre nom de famille ?", "Quel est votre prénom ?"))
# Separate data depending on scenario
traits_join_DFS_Objective <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des zombies")
traits_join_DFS_Narrative <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Les recherches d'Isidore")
traits_join_DFS_Aesthetic <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des portails")
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
# Create dataframe from excel sheets
X5_Traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
DFS_TPI <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
#### Personnality Traits
# Erase test data (from before 21st of May)
X5_Traits <- filter(X5_Traits, X5_Traits$Horodateur >= "2021-05-21")
# Erase double from data
X5_Traits <- distinct(X5_Traits, `Adresse e-mail`, .keep_all = TRUE)
# Lower and remove accents from all names
X5_Traits$`Quel est votre prénom ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre prénom ?`), "Latin-ASCII")
X5_Traits$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre nom de famille ?`), "Latin-ASCII")
for(i in 1:length(X5_Traits)){
if(grepl("[R]", colnames(X5_Traits[i]))){
X5_Traits[i] <- 8 - X5_Traits[i]
}
}
#### Flow and Presence Questionnaires
# Erase test data (from before 25th of May)
DFS_TPI <- filter(DFS_TPI, DFS_TPI$Horodateur >= "2021-05-25")
# Lower and remove accents from all names
DFS_TPI$`Quel est votre prénom ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre prénom ?`), "Latin-ASCII")
DFS_TPI$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre nom de famille ?`), "Latin-ASCII")
#### Join
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by=c("Quel est votre nom de famille ?", "Quel est votre prénom ?"))
# Separate data depending on scenario
traits_join_DFS_Objective <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des zombies")
traits_join_DFS_Narrative <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Les recherches d'Isidore")
traits_join_DFS_Aesthetic <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des portails")
View(X5_Traits)
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
# Create dataframe from excel sheets
X5_Traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
DFS_TPI <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
#### Personnality Traits
# Erase test data (from before 21st of May)
X5_Traits <- filter(X5_Traits, X5_Traits$Horodateur >= "2021-05-21")
# Erase double from data
X5_Traits <- distinct(X5_Traits, `Adresse e-mail`, .keep_all = TRUE)
# Lower and remove accents from all names
X5_Traits$`Quel est votre prénom ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre prénom ?`), "Latin-ASCII")
X5_Traits$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre nom de famille ?`), "Latin-ASCII")
View(X5_Traits)
for(i in 1:length(X5_Traits)){
if(grepl("[R]", colnames(X5_Traits[i]))){
X5_Traits[i] <- 8 - X5_Traits[i]
}
}
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
# Create dataframe from excel sheets
X5_Traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (réponses).xlsx")
DFS_TPI <- read_excel("Dispositional Flow Scale + TPI (réponses).xlsx")
#### Personnality Traits
# Erase test data (from before 21st of May)
X5_Traits <- filter(X5_Traits, X5_Traits$Horodateur >= "2021-05-21")
# Erase double from data
X5_Traits <- distinct(X5_Traits, `Adresse e-mail`, .keep_all = TRUE)
# Lower and remove accents from all names
X5_Traits$`Quel est votre prénom ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre prénom ?`), "Latin-ASCII")
X5_Traits$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(X5_Traits$`Quel est votre nom de famille ?`), "Latin-ASCII")
for(i in 1:length(X5_Traits)){
if(grepl("[R]", colnames(X5_Traits[i]))){
X5_Traits[i] <- 8 - X5_Traits[i]
}
}
#### Flow and Presence Questionnaires
# Erase test data (from before 25th of May)
DFS_TPI <- filter(DFS_TPI, DFS_TPI$Horodateur >= "2021-05-25")
# Lower and remove accents from all names
DFS_TPI$`Quel est votre prénom ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre prénom ?`), "Latin-ASCII")
DFS_TPI$`Quel est votre nom de famille ?` <- stri_trans_general(tolower(DFS_TPI$`Quel est votre nom de famille ?`), "Latin-ASCII")
#### Join
traits_join_DFS <- inner_join(X5_Traits, DFS_TPI, by=c("Quel est votre nom de famille ?", "Quel est votre prénom ?"))
# Separate data depending on scenario
traits_join_DFS_Objective <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des zombies")
traits_join_DFS_Narrative <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Les recherches d'Isidore")
traits_join_DFS_Aesthetic <- filter(traits_join_DFS, traits_join_DFS$`Qu'avez vous vu lors de l'expérience ?` == "Des portails")
View(traits_join_DFS_Aesthetic)
seq(from=37, to=37+4*9, by=9)
seq(from=37, to=37+3*9, by=9)
for(i in 37:(37+8)){
dfs_blocks = c(dfs_blocks, seq(from=i, to=i+3*9, by=9))
}
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks = c(dfs_blocks, seq(from=i, to=i+3*9, by=9))
}
View(dfs_blocks)
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
View(traits_blocks)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks = append(dfs_blocks, seq(from=i, to=i+3*9, by=9))
}
View(dfs_blocks)
10:14
append(10:14, 15:20)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, to=i+3*9, by=9)
}
View(dfs_blocks)
View(traits_blocks)
traits_modes = LETTERS[seq(1, 1, 5)]
traits_modes = LETTERS[seq(1, 1, length.out=5)]
dfs_modes = LETTERS[seq(1, 1, length.out=9)]
dfs_modes = LETTERS[seq(2, 2, length.out=9)]
Attack = c(0, 0, 0)
Defense = c(0, 0, 0)
Success = c(1, 1, 0)
# path matrix (inner model)
foot_path = rbind(Attack, Defense, Success)
View(foot_path)
rownames(foot_path) = colnames(foot_path)
View(foot_path)
Attack = c(0, 0, 0)
Defense = c(0, 0, 0)
Success = c(1, 1, 0)
# path matrix (inner model)
foot_path = rbind(Attack, Defense, Success)
colnames(foot_path) = rownames(foot_path)
View(foot_path)
pathMatrix = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
View(pathMatrix)
all_blocks = list(traits_blocks, dfs_blocks)
View(all_blocks)
all_blocks = list(append(traits_blocks, dfs_blocks))
View(all_blocks)
all_blocks = append(traits_blocks, dfs_blocks)
View(all_blocks)
all_modes = append(traits_modes, dfs_modes)
all_modes = append(traits_modes, dfs_modes)
all_modes
library(plspm)
library(plot.m?satrix)
source("LoadData.R",encoding="utf-8")
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, to=i+3*9, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_modes = LETTERS[seq(1, 1, length.out=5)]
dfs_modes = LETTERS[seq(2, 2, length.out=9)]
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_pls = plspm(traits_join_DFS_Objective, traits_dfs_path, traits_dfs_blocks, modes = traits_dfs_modes)
traits_dfs_path = as.matrix(read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1))
library(plspm)
library(plot.m?satrix)
source("LoadData.R",encoding="utf-8")
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, to=i+3*9, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_modes = LETTERS[seq(1, 1, length.out=5)]
dfs_modes = LETTERS[seq(2, 2, length.out=9)]
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = as.matrix(read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1))
traits_dfs_pls = plspm(traits_join_DFS_Objective, traits_dfs_path, traits_dfs_blocks, modes = traits_dfs_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
View(traits_dfs_path)
traits_dfs_pls = plspm(traits_join_DFS_Objective, traits_dfs_path, traits_dfs_blocks, modes = traits_dfs_modes)
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_join_DFS_Objective, traits_dfs_path, traits_dfs_blocks, modes = traits_dfs_modes)
View(traits_dfs_path)
View(traits_join_DFS_Objective)
traits_dfs_pls = plspm(traits_join_DFS_Objective, traits_dfs_path, traits_dfs_blocks)
library(plspm)
library(plot.m?satrix)
source("LoadData.R",encoding="utf-8")
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, to=i+3*9, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_modes = LETTERS[seq(1, 1, length.out=5)]
dfs_modes = LETTERS[seq(2, 2, length.out=9)]
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_join_DFS_Objective, traits_dfs_path, traits_dfs_blocks)
?plspm
# load dataset satisfaction
data(satisfaction)
IMAG = c(0,0,0,0,0,0)
EXPE = c(1,0,0,0,0,0)
QUAL = c(0,1,0,0,0,0)
VAL = c(0,1,1,0,0,0)
SAT = c(1,1,1,1,0,0)
LOY = c(1,0,0,0,1,0)
sat_path = rbind(IMAG, EXPE, QUAL, VAL, SAT, LOY)
View(sat_path)
# plot diagram of path matrix
innerplot(sat_path)
innerplot(traits_dfs_path)
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
traits_dfs_modes = append(traits_modes, dfs_modes)
?satisfaction
View(satisfaction)
# load dataset satisfaction
data(satisfaction)
# path matrix
IMAG = c(0,0,0,0,0,0)
EXPE = c(1,0,0,0,0,0)
QUAL = c(0,1,0,0,0,0)
VAL = c(0,1,1,0,0,0)
SAT = c(1,1,1,1,0,0)
LOY = c(1,0,0,0,1,0)
sat_path = rbind(IMAG, EXPE, QUAL, VAL, SAT, LOY)
# plot diagram of path matrix
innerplot(sat_path)
# blocks of outer model
sat_blocks = list(1:5, 6:10, 11:15, 16:19, 20:23, 24:27)
# vector of modes (reflective indicators)
sat_mod = rep("A", 6)
# apply plspm
satpls = plspm(satisfaction, sat_path, sat_blocks, modes = sat_mod,
scaled = FALSE)
View(satpls)
library(plspm)
library(plot.m?satrix)
source("LoadData.R",encoding="utf-8")
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, to=i+3*9, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
traits_dfs_modes = append(traits_modes, dfs_modes)
View(sat_path)
View(traits_dfs_blocks)
View(sat_blocks)
View(traits_dfs_blocks)
library(plspm)
library(plot.m?satrix)
source("LoadData.R",encoding="utf-8")
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, to=i+27, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_join_DFS_Objective, traits_dfs_path, traits_dfs_blocks)
library(plspm)
library(plot.m?satrix)
source("LoadData.R",encoding="utf-8")
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, length.out=4, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:(37+8)){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, length.out=4, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
library(plspm)
library(plot.m?satrix)
source("LoadData.R",encoding="utf-8")
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:45){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, length.out=4, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_join_DFS_Objective, traits_dfs_path, traits_dfs_blocks)
traits_join_DFS_Objective[traits_blocks[1]]
traits_join_DFS_Objective[traits_blocks[,1]]
traits_blocks[1]
traits_blocks[{1]]
traits_blocks[[1]]
traits_join_DFS_Objective[traits_blocks[[1]]]
satisfaction[sat_blocks[[1]]]
head(satisfaction[sat_blocks[[1]]])
head(satisfaction[sat_blocks[1]])
head(satisfaction[sat_blocks[[1]])
head(satisfaction[sat_blocks[[1]]])
head(satisfaction[sat_blocks[[2]]])
head(satisfaction[sat_blocks[[3]]])
head(satisfaction[sat_blocks[[4]]])
head(satisfaction[sat_blocks[[5]]])
head(satisfaction[sat_blocks[[6]]])
head(satisfaction[sat_blocks[[7]]])
head(satisfaction[sat_blocks[[6]]])
traits_join_DFS_Objective[traits_blocks[[1]]]
as.matrix(traits_join_DFS_Objective)
as.matrix(traits_join_DFS_Objective)[traits_blocks[[1]]]
as.matrix(traits_join_DFS_Objective)[traits_blocks[[1]]]
as.matrix(traits_join_DFS_Objective)[traits_blocks[[,1]]]
as.matrix(traits_join_DFS_Objective)[traits_blocks[1]]
traits_join_DFS_Objective[traits_blocks[[1]]]
as.matrix(traits_join_DFS_Objective[traits_blocks[[1]]])
as.data.frame(traits_join_DFS_Objective[traits_blocks[[1]]])
library(plspm)
library(plot.m?satrix)
source("LoadData.R",encoding="utf-8")
traits_blocks = list(10:14, 15:19, 20:24, 25:29, 30:34)
dfs_blocks = list()
for(i in 37:45){
dfs_blocks[[length(dfs_blocks)+1]] = seq(from=i, length.out=4, by=9)
}
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(as.data.frame(traits_join_DFS_Objective), traits_dfs_path, traits_dfs_blocks)
View(traits_join_DFS_Objective)
traits_join_DFS_Objective[traits_blocks[[6]]]
traits_join_DFS_Objective[dfs_blocks[[1]]]
traits_join_DFS_Objective[dfs_blocks[[2]]]
traits_join_DFS_Objective[dfs_blocks[[3]]]
traits_join_DFS_Objective[dfs_blocks[[9]]]
traits_join_DFS_Objective[traits_dfs_blocks[[9]]]
traits_join_DFS_Objective[traits_dfs_blocks[[14]]]
traits_join_DFS_Objective[traits_dfs_blocks[[1]]]
traits_dfs_pls = plspm(Data = as.data.frame(traits_join_DFS_Objective), path_matrix = traits_dfs_path, blocks = traits_dfs_blocks)
