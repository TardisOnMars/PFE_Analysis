rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:12]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_4 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = list(c(87, 89, 90, 92, 93, 94))
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = "A"
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_2.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:7]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_5 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = c(87, 88, 89, 94)
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 4)
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_4.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:10]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_6 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = list(c(87, 88, 89, 94))
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = "A"
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_2.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:7]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plot_plspm_traits_dfs = function(path_coefs, p_values, significative_level = 0.05, title = "", color_lim)
{
corrplot(path_coefs, title=title, method="number",
sig.level = significative_level, p.mat = p_values,
is.corr = FALSE, cl.lim = color_lim, col=brewer.pal(n=8, name="PuOr"),
insig = "blank",  mar=c(0,0,1,0))
}
pls_analysis = function(first_df, second_df, third_df, first_title, second_title, third_title, type=1, color_lim = c(-1, 1)){
if(type==1){
first_pls = plspm_traits_dfs(first_df)
second_pls = plspm_traits_dfs(second_df)
third_pls = plspm_traits_dfs(third_df)
}else if(type==2){
first_pls = plspm_traits_dfs_2(first_df)
second_pls = plspm_traits_dfs_2(second_df)
third_pls = plspm_traits_dfs_2(third_df)
}else if(type==3){
first_pls = plspm_traits_dfs_3(first_df)
second_pls = plspm_traits_dfs_3(second_df)
third_pls = plspm_traits_dfs_3(third_df)
}else if(type==4){
first_pls = plspm_traits_dfs_4(first_df)
second_pls = plspm_traits_dfs_4(second_df)
third_pls = plspm_traits_dfs_4(third_df)
}else if(type==5){
first_pls = plspm_traits_dfs_5(first_df)
second_pls = plspm_traits_dfs_5(second_df)
third_pls = plspm_traits_dfs_5(third_df)
}else if(type==6){
first_pls = plspm_traits_dfs_6(first_df)
second_pls = plspm_traits_dfs_6(second_df)
third_pls = plspm_traits_dfs_6(third_df)
}
par(mfcol = c(3,2))
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, title = first_title, color_lim = color_lim)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, title = second_title, color_lim = color_lim)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, title = third_title, color_lim = color_lim)
mtext("Significative level = 0.05", line=-2, side=2, outer = TRUE)
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, significative_level = 0.1 ,title = first_title, color_lim = color_lim)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, significative_level = 0.1, title = second_title, color_lim = color_lim)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, significative_level = 0.1, title = third_title, color_lim = color_lim)
mtext("Significative level = 0.10", line = -1, side=4, outer = TRUE)
}
pls_analysis(bind_rows(aesthetic_second, aesthetic_third),
bind_rows(narrative_second, narrative_third),
bind_rows(objectives_second, objectives_third),
"Aesthetic Scenario - 2nd / 3rd", "Narrative Scenario - 2nd / 3rd", "Objectives Scenario - 2nd / 3rd",
color_lim = NULL)
pls_analysis(bind_rows(aesthetic_second, aesthetic_third),
bind_rows(narrative_second, narrative_third),
bind_rows(objectives_second, objectives_third),
"Aesthetic Scenario - 2nd / 3rd", "Narrative Scenario - 2nd / 3rd", "Objectives Scenario - 2nd / 3rd",
color_lim = NULL)
pls_analysis = function(first_df, second_df, third_df, first_title, second_title, third_title, type=1, color_lim = c(-1, 1)){
if(type==1){
first_pls = plspm_traits_dfs(first_df)
second_pls = plspm_traits_dfs(second_df)
third_pls = plspm_traits_dfs(third_df)
}else if(type==2){
first_pls = plspm_traits_dfs_2(first_df)
second_pls = plspm_traits_dfs_2(second_df)
third_pls = plspm_traits_dfs_2(third_df)
}else if(type==3){
first_pls = plspm_traits_dfs_3(first_df)
second_pls = plspm_traits_dfs_3(second_df)
third_pls = plspm_traits_dfs_3(third_df)
}else if(type==4){
first_pls = plspm_traits_dfs_4(first_df)
second_pls = plspm_traits_dfs_4(second_df)
third_pls = plspm_traits_dfs_4(third_df)
}else if(type==5){
first_pls = plspm_traits_dfs_5(first_df)
second_pls = plspm_traits_dfs_5(second_df)
third_pls = plspm_traits_dfs_5(third_df)
}else if(type==6){
first_pls = plspm_traits_dfs_6(first_df)
second_pls = plspm_traits_dfs_6(second_df)
third_pls = plspm_traits_dfs_6(third_df)
}
par(mfcol = c(3,2))
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, title = first_title, color_lim = color_lim)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, title = second_title, color_lim = color_lim)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, title = third_title, color_lim = color_lim)
mtext("Significative level = 0.05", line=-2, side=2, outer = TRUE)
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, significative_level = 0.1 ,title = first_title, color_lim = color_lim)
print(first_pls$p_values)
print(first_pls$path_coefs)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, significative_level = 0.1, title = second_title, color_lim = color_lim)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, significative_level = 0.1, title = third_title, color_lim = color_lim)
mtext("Significative level = 0.10", line = -1, side=4, outer = TRUE)
}
pls_analysis(bind_rows(aesthetic_second, aesthetic_third),
bind_rows(narrative_second, narrative_third),
bind_rows(objectives_second, objectives_third),
"Aesthetic Scenario - 2nd / 3rd", "Narrative Scenario - 2nd / 3rd", "Objectives Scenario - 2nd / 3rd",
color_lim = NULL)
library(readxl)
library(dplyr)
library(stringi)
library(ggplot2)
#### Personnality Traits
# Create dataframe from excel sheets
traits <- read_excel("Les Cinq Facteurs des Traits De Joueurs (rÃ©ponses).xlsx")
# Reverse answers for questions marked with "[R]" (likert 7)
for(i in 1:length(traits)){
if(grepl("[R]", colnames(traits[i]))){
traits[i] <- 8 - traits[i]
}
}
# Compute traits
traits <-mutate(rowwise(traits), aesthetic=ceiling(sum(c_across(15:19), -5) * 100/30))
traits <-mutate(rowwise(traits), challenge=ceiling(sum(c_across(25:29), -5) * 100/30))
traits <-mutate(rowwise(traits), narrative=ceiling(sum(c_across(20:24), -5) * 100/30))
traits <-mutate(rowwise(traits), objectives=ceiling(sum(c_across(30:34), -5) * 100/30))
traits <-mutate(rowwise(traits), social=ceiling(sum(c_across(10:14), -5) * 100/30))
traits <- rename_all(traits, make.names)
colnames(traits) = stri_trans_general(tolower(colnames(traits)), "Latin-ASCII")
# Erase test data (from before 21st of May)
traits <- filter(traits, horodateur >= "2021-05-21")
traits <- filter(traits, !identifiant.participant %in% c(8, 9, 12, 13, 21, 23, 27, 31, 33, 36, 54, 27))
# traits <- filter(traits, a.quelle.frequence.jouez.vous.aux.jeux.videos.. != "Jamais")
# Erase double from data
traits <- distinct(traits, adresse.e.mail, .keep_all = TRUE)
# Lower and remove accents from all names
traits$quel.est.votre.prenom.. <- stri_trans_general(tolower(traits$quel.est.votre.prenom..), "Latin-ASCII")
traits$quel.est.votre.nom.de.famille.. <- stri_trans_general(tolower(traits$quel.est.votre.nom.de.famille..), "Latin-ASCII")
#### Flow and Presence Questionnaires
# Create dataframe from excel sheets
dfs_tpi <- read_excel("Dispositional Flow Scale + TPI (rÃ©ponses).xlsx")
dfs_tpi <- rename_all(dfs_tpi, make.names)
colnames(dfs_tpi) = stri_trans_general(tolower(colnames(dfs_tpi)), "Latin-ASCII")
# Compute flow and engagement scores
dfs_tpi <- mutate(rowwise(dfs_tpi), challenge_skill_balance=sum(c_across(seq.int(from=2, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), action_awareness=sum(c_across(seq.int(from=3, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), clear_goals=sum(c_across(seq.int(from=4, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), unambiguous_feedback=sum(c_across(seq.int(from=5, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), concentration=sum(c_across(seq.int(from=6, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), sense_of_control=sum(c_across(seq.int(from=7, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), loss_self_consciousness=sum(c_across(seq.int(from=8, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), time_transformation=sum(c_across(seq.int(from=9, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), autotelic_experience=sum(c_across(seq.int(from=10, length.out=4, by=9))))
dfs_tpi <- mutate(rowwise(dfs_tpi), engagement=sum(c_across(38:43))/6)
# Erase test data (from before 25th of May)
dfs_tpi <- filter(dfs_tpi, horodateur >= "2021-05-25")
# Lower and remove accents from all names
dfs_tpi$quel.est.votre.prenom.. <- stri_trans_general(tolower(dfs_tpi$quel.est.votre.prenom..), "Latin-ASCII")
dfs_tpi$quel.est.votre.nom.de.famille.. <- stri_trans_general(tolower(dfs_tpi$quel.est.votre.nom.de.famille..), "Latin-ASCII")
#### Join
traits_dfs_df <- inner_join(traits, dfs_tpi, by=c("quel.est.votre.nom.de.famille..", "quel.est.votre.prenom.."))
# Separate data depending on scenario
objectives_df <- filter(traits_dfs_df, qu.avez.vous.vu.lors.de.l.experience.. == "Des zombies")
narrative_df <- filter(traits_dfs_df, qu.avez.vous.vu.lors.de.l.experience.. == "Les recherches d'Isidore")
aesthetic_df <- filter(traits_dfs_df, qu.avez.vous.vu.lors.de.l.experience.. == "Des portails")
# Separate data depending on order
first_df = filter(traits_dfs_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "PremiÃ¨re")
second_df = filter(traits_dfs_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "DeuxiÃ¨me")
third_df = filter(traits_dfs_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "TroisiÃ¨me")
# Separate data depending on scenario AND order
aesthetic_first = filter(aesthetic_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "PremiÃ¨re")
aesthetic_second = filter(aesthetic_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "DeuxiÃ¨me")
aesthetic_third = filter(aesthetic_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "TroisiÃ¨me")
narrative_first = filter(narrative_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "PremiÃ¨re")
narrative_second = filter(narrative_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "DeuxiÃ¨me")
narrative_third = filter(narrative_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "TroisiÃ¨me")
objectives_first = filter(objectives_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "PremiÃ¨re")
objectives_second = filter(objectives_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "DeuxiÃ¨me")
objectives_third = filter(objectives_df, est.ce.votre.premiere..deuxieme.ou.troisieme.experience.. == "TroisiÃ¨me")
library(plspm)
library(corrplot)
library(RColorBrewer)
plspm_traits_dfs = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = 86:94
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:15]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_2 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = list(86:94)
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = "A"
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_2.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:7]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_3 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = c(87, 89, 90, 92, 93, 94)
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 6)
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_3.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:12]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_4 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = list(c(87, 89, 90, 92, 93, 94))
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = "A"
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_2.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:7]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_5 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = c(87, 88, 89, 94)
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 4)
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_4.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:10]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_6 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = list(c(87, 88, 89, 94))
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = "A"
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_2.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:7]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plot_plspm_traits_dfs = function(path_coefs, p_values, significative_level = 0.05, title = "", color_lim)
{
corrplot(path_coefs, title=title, method="number",
sig.level = significative_level, p.mat = p_values,
is.corr = FALSE, cl.lim = color_lim, col=brewer.pal(n=8, name="PuOr"),
insig = "blank",  mar=c(0,0,1,0))
}
pls_analysis = function(first_df, second_df, third_df, first_title, second_title, third_title, type=1, color_lim = c(-1, 1)){
if(type==1){
first_pls = plspm_traits_dfs(first_df)
second_pls = plspm_traits_dfs(second_df)
third_pls = plspm_traits_dfs(third_df)
}else if(type==2){
first_pls = plspm_traits_dfs_2(first_df)
second_pls = plspm_traits_dfs_2(second_df)
third_pls = plspm_traits_dfs_2(third_df)
}else if(type==3){
first_pls = plspm_traits_dfs_3(first_df)
second_pls = plspm_traits_dfs_3(second_df)
third_pls = plspm_traits_dfs_3(third_df)
}else if(type==4){
first_pls = plspm_traits_dfs_4(first_df)
second_pls = plspm_traits_dfs_4(second_df)
third_pls = plspm_traits_dfs_4(third_df)
}else if(type==5){
first_pls = plspm_traits_dfs_5(first_df)
second_pls = plspm_traits_dfs_5(second_df)
third_pls = plspm_traits_dfs_5(third_df)
}else if(type==6){
first_pls = plspm_traits_dfs_6(first_df)
second_pls = plspm_traits_dfs_6(second_df)
third_pls = plspm_traits_dfs_6(third_df)
}
par(mfcol = c(3,2))
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, title = first_title, color_lim = color_lim)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, title = second_title, color_lim = color_lim)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, title = third_title, color_lim = color_lim)
mtext("Significative level = 0.05", line=-2, side=2, outer = TRUE)
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, significative_level = 0.1 ,title = first_title, color_lim = color_lim)
print(first_pls$p_values)
print(first_pls$path_coefs)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, significative_level = 0.1, title = second_title, color_lim = color_lim)
print(second_pls$p_values)
print(second_pls$path_coefs)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, significative_level = 0.1, title = third_title, color_lim = color_lim)
print(third_pls$p_values)
print(third_pls$path_coefs)
mtext("Significative level = 0.10", line = -1, side=4, outer = TRUE)
}
pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Objectives Scenario",
color_lim = NULL)
pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Objectives Scenario",
color_lim = NULL)
