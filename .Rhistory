dfs_modes = rep("A", 9)
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:15]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
View(traits_dfs_pls)
plot(traits_dfs_pls)
plot(traits_dfs_pls$inner_model)
traits_dfs_pls$inner_model
traits_dfs_pls$outer_model
traits_dfs_pls$scores
traits_dfs_pls$unidim
traits_dfs_pls$path_coeffs
traits_dfs_pls$path_coefs
traits_dfs_pls$inner_summary
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement")
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement", y_range = c(0,7))
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement", y_range = c(0,7))
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement", y_range = c(0,7))
order_bp("challenge_skill_balance")
order_bp("engagement", y_range=c(0,7))
order_scenario_bp("unambiguous_feedback", scenario = "aesthetic")
order_scenario_bp("challenge_skill_balance", scenario = "narrative")
order_scenario_bp("engagement", scenario = "narrative", y_range=c(0,7))
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement", y_range = c(0,7))
order_bp("challenge_skill_balance")
order_bp("engagement", y_range=c(0,7))
order_scenario_bp("unambiguous_feedback", scenario = "aesthetic")
order_scenario_bp("challenge_skill_balance", scenario = "narrative")
order_scenario_bp("engagement", scenario = "narrative", y_range=c(0,7))
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement", y_range = c(0,7))
order_bp("challenge_skill_balance")
order_bp("engagement", y_range=c(0,7))
order_scenario_bp("clear_goals", scenario = "aesthetic")
order_scenario_bp("unambiguous_feedback", scenario = "aesthetic")
order_scenario_bp("engagement", scenario = "aesthetic", y_range=c(0,7))
order_scenario_bp("challenge_skill_balance", scenario = "narrative")
order_scenario_bp("engagement", scenario = "narrative", y_range=c(0,7))
library(stringr)
source("LoadData.R",encoding="utf-8")
scenario_bp = function(dimension = "", y_range=c(0,28)){
sumaov <- summary.aov(aov(traits_dfs_df[[dimension]] ~ qu.avez.vous.vu.lors.de.l.experience..,data=traits_dfs_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
dimensions_df = data.frame(Objectives=objectives_df[[dimension]],
Aesthetic=aesthetic_df[[dimension]],
Narrative=narrative_df[[dimension]])
boxplot(dimensions_df, ylim=y_range, col=c("darkorchid1", "cadetblue1", "darkolivegreen1"))
means <- colMeans(dimensions_df)
points(means, col = "red", pch = 19, cex=1.5)
mtext("Score", side=2, line=2, cex=1.75)
#mtext(paste(str_to_title(dimension), "\n All Orders"), line=1)
#mtext(paste("P-Value of ANOVA", round(sumaov[[1]][[1,"Pr(>F)"]], digits=3)), side=1, line=3)
}
}
order_bp = function(dimension = "", y_range=c(0,28)){
sumaov <- summary.aov(aov(traits_dfs_df[[dimension]] ~ est.ce.votre.premiere..deuxieme.ou.troisieme.experience.., data=traits_dfs_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
dimensions_df = data.frame(First=first_df[[dimension]],
Second=second_df[[dimension]],
Third=third_df[[dimension]])
boxplot(dimensions_df, ylab = "score", ylim=y_range, col=c("darkorchid1", "cadetblue1", "darkolivegreen1"))
means <- colMeans(dimensions_df)
points(means, col = "red", pch = 19, cex=1.5)
mtext("Score", side=2, line=2, cex=1.75)
#mtext(paste(str_to_title(dimension), "\n All Scenario"), line=1)
#mtext(paste("P-Value of ANOVA", round(sumaov[[1]][[1,"Pr(>F)"]], digits=3)), side=1, line=3)
}
}
scenario_order_bp = function(dimension = "", y_range=c(0,28), order=1){
if(order == 1){
sumaov <- summary.aov(aov(first_df[[dimension]] ~ qu.avez.vous.vu.lors.de.l.experience.., data=first_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
boxplot(data.frame(Objectives=objectives_first[[dimension]],
Aesthetic=aesthetic_first[[dimension]],
Narrative=narrative_first[[dimension]]), ylab = "score", ylim=y_range, col=c("darkorchid1", "cadetblue1", "darkolivegreen1"))
}
}else if(order == 2){
sumaov <- summary.aov(aov(second_df[[dimension]] ~ qu.avez.vous.vu.lors.de.l.experience.., data=second_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
boxplot(data.frame(Objectives=objectives_second[[dimension]],
Aesthetic=aesthetic_second[[dimension]],
Narrative=narrative_second[[dimension]]), ylab = "score", ylim=y_range, col=c("darkorchid1", "cadetblue1", "darkolivegreen1"))
}
}else if(order == 3){
sumaov <- summary.aov(aov(third_df[[dimension]] ~ qu.avez.vous.vu.lors.de.l.experience.., data=third_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
boxplot(data.frame(Objectives=objectives_third[[dimension]],
Aesthetic=aesthetic_third[[dimension]],
Narrative=narrative_third[[dimension]]), ylab = "score", ylim=y_range, col=c("darkorchid1", "cadetblue1", "darkolivegreen1"))
}
}
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
mtext(paste(str_to_title(dimension), "\n Order :", order), line=1)
mtext(paste("P-Value of ANOVA", round(sumaov[[1]][[1,"Pr(>F)"]], digits=3)), side=1, line=3)
}
}
order_scenario_bp = function(dimension = "", y_range=c(0,28), scenario=""){
if(scenario == "aesthetic"){
sumaov <- summary.aov(aov(aesthetic_df[[dimension]] ~ est.ce.votre.premiere..deuxieme.ou.troisieme.experience.., data=aesthetic_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
dimensions_df = data.frame(First=aesthetic_first[[dimension]],
Second=aesthetic_second[[dimension]],
Third=aesthetic_third[[dimension]])
boxplot(dimensions_df, ylab = "score", ylim=y_range, col=c("darkorchid1", "cadetblue1", "darkolivegreen1"))
means <- colMeans(dimensions_df)
points(means, col = "red", pch = 19, cex=1.5)
mtext("Score", side=2, line=2, cex=1.75)
}
}else if(scenario == "narrative"){
sumaov <- summary.aov(aov(narrative_df[[dimension]] ~ est.ce.votre.premiere..deuxieme.ou.troisieme.experience.., data=narrative_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
dimensions_df = data.frame(First=narrative_first[[dimension]],
Second=narrative_second[[dimension]],
Third=narrative_third[[dimension]])
boxplot(dimensions_df, ylab = "score", ylim=y_range, col=c("darkorchid1", "cadetblue1", "darkolivegreen1"))
means <- colMeans(dimensions_df)
points(means, col = "red", pch = 19, cex=1.5)
mtext("Score", side=2, line=2, cex=1.75)
}
}else if(scenario == "objectives"){
sumaov <- summary.aov(aov(objectives_df[[dimension]] ~ est.ce.votre.premiere..deuxieme.ou.troisieme.experience.., data=objectives_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
dimensions_df = data.frame(First=objectives_first[[dimension]],
Second=objectives_second[[dimension]],
Third=objectives_third[[dimension]])
boxplot(dimensions_df, ylab = "score", ylim=y_range, col=c("darkorchid1", "cadetblue1", "darkolivegreen1"))
means <- colMeans(dimensions_df)
points(means, col = "red", pch = 19, cex=1.5)
mtext("Score", side=2, line=2, cex=1.75)
}
}
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
#mtext(paste(str_to_title(dimension), "\n Scenario :" , str_to_title(scenario)), line=1)
#mtext(paste("P-Value of ANOVA", round(sumaov[[1]][[1,"Pr(>F)"]], digits=3)), side=1, line=3)
}
}
site_bp = function(dimension = "", y_range=c(0,28)){
sumaov <- summary.aov(aov(traits_dfs_df[[dimension]] ~ sur.quel.site.allez.vous.participer.a.l.experimentation.., data=traits_dfs_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
par(mfrow=c(1, 2))
boxplot(enise_df[[dimension]], ylim=y_range, data=enise_df, xlab="ENISE")
boxplot(insa_df[[dimension]], ylim=y_range, data=insa_df, xlab="INSA")
mtext(paste(str_to_title(dimension), "\n Depending on site"), line=-3, outer=TRUE)
mtext(paste("P-Value of ANOVA", round(sumaov[[1]][[1,"Pr(>F)"]], digits=3)), side=1, line=-3, outer=TRUE)
}
}
game_bp = function(dimension = "", y_range=c(0,28)){
sumaov <- summary.aov(aov(traits_dfs_df[[dimension]] ~ a.quelle.frequence.jouez.vous.aux.jeux.videos.., data=traits_dfs_df))
if(round(sumaov[[1]][[1,"Pr(>F)"]] < 1.0)){
par(mfrow=c(1, 4))
boxplot(nevergame_bf[[dimension]], ylim=y_range, data=enise_df, xlab="Never")
boxplot(lowgame_bf[[dimension]], ylim=y_range, data=insa_df, xlab="Occasionally")
boxplot(midgame_bf[[dimension]], ylim=y_range, data=insa_df, xlab="Regularly")
boxplot(highgame_bf[[dimension]], ylim=y_range, data=insa_df, xlab="Everyday")
mtext(paste(str_to_title(dimension), "\n Depending on video game frequency"), line=-3, outer=TRUE)
mtext(paste("P-Value of ANOVA", round(sumaov[[1]][[1,"Pr(>F)"]], digits=3)), side=1, line=-3, outer=TRUE)
}
}
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement", y_range = c(0,7))
order_bp("challenge_skill_balance")
order_bp("engagement", y_range=c(0,7))
order_scenario_bp("clear_goals", scenario = "aesthetic")
order_scenario_bp("unambiguous_feedback", scenario = "aesthetic")
order_scenario_bp("engagement", scenario = "aesthetic", y_range=c(0,7))
order_scenario_bp("challenge_skill_balance", scenario = "narrative")
order_scenario_bp("engagement", scenario = "narrative", y_range=c(0,7))
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement", y_range = c(0,7))
order_bp("challenge_skill_balance")
order_bp("engagement", y_range=c(0,7))
order_scenario_bp("clear_goals", scenario = "aesthetic")
order_scenario_bp("unambiguous_feedback", scenario = "aesthetic")
order_scenario_bp("engagement", scenario = "aesthetic", y_range=c(0,7))
order_scenario_bp("challenge_skill_balance", scenario = "narrative")
order_scenario_bp("engagement", scenario = "narrative", y_range=c(0,7))
par(mar = c(2, 3, 0, 0.3), cex=1.5)
scenario_bp("clear_goals")
scenario_bp("unambiguous_feedback")
scenario_bp("engagement", y_range = c(0,7))
order_bp("challenge_skill_balance")
order_bp("engagement", y_range=c(0,7))
order_scenario_bp("clear_goals", scenario = "aesthetic")
order_scenario_bp("unambiguous_feedback", scenario = "aesthetic")
order_scenario_bp("engagement", scenario = "aesthetic", y_range=c(0,7))
order_scenario_bp("challenge_skill_balance", scenario = "narrative")
order_scenario_bp("engagement", scenario = "narrative", y_range=c(0,7))
par(mar = c(2, 3, 0, 0.3), cex=1.75)
hist(aesthetic_df$aesthetic, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="")
mtext("Frequency", side=2, line=2, cex=1.75)
par(mar = c(2, 2, 0, 0.3), cex=2)
hist(aesthetic_df$challenge, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$narrative, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$objectives, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$social, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
par(mar = c(2, 3, 0, 0.3), cex=1.75)
hist(aesthetic_df$aesthetic, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="")
mtext("Frequency", side=2, line=2, cex=1.75)
par(mar = c(2, 2, 0, 0.3), cex=2)
hist(aesthetic_df$challenge, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$narrative, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$objectives, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$social, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
par(mar = c(2, 3, 0, 0.3), cex=1.75)
hist(aesthetic_df$aesthetic, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="")
mtext("Frequency", side=2, line=2, cex=1.75)
par(mar = c(2, 2, 0, 0.3), cex=2)
hist(aesthetic_df$challenge, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$narrative, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$objectives, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
hist(aesthetic_df$social, xlim=c(0, 100), ylim=c(0, 15), main="", xlab="", ylab="")
pls_analysis(first_df=first_df, second_df=second_df, third_df=third_df,
"1st", "2nd", "3rd",
color_lim = NULL)
library(plspm)
library(corrplot)
library(RColorBrewer)
plspm_traits_dfs = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = 86:94
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 9)
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:15]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_2 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = list(86:94)
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = "A"
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_2.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:7]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_3 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = c(87, 89, 90, 92, 93, 94)
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 6)
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_3.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:12]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_4 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = list(c(87, 89, 90, 92, 93, 94))
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = "A"
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_2.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:7]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_5 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = c(87, 88, 89, 94)
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = rep("A", 4)
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_4.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:10]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plspm_traits_dfs_6 = function(traits_dfs_df){
traits_blocks = 36:40
dfs_blocks = list(c(87, 88, 89, 94))
presence_blocks = 95
traits_dfs_blocks = append(traits_blocks, dfs_blocks)
traits_dfs_blocks = as.list(append(traits_dfs_blocks, presence_blocks))
traits_modes = rep("A", 5)
dfs_modes = "A"
presence_modes = "A"
traits_dfs_modes = append(traits_modes, dfs_modes)
traits_dfs_modes = append(traits_dfs_modes, presence_modes)
traits_dfs_path = read.csv("path_inner_model_2.csv", header=TRUE, sep=";", row.names = 1)
traits_dfs_path = as.matrix(traits_dfs_path)
rownames(traits_dfs_path) = make.names(rownames(traits_dfs_path))
colnames(traits_dfs_path) = rownames(traits_dfs_path)
traits_dfs_pls = plspm(traits_dfs_df, traits_dfs_path, traits_dfs_blocks, scaled = FALSE )
input_vars = colnames(traits_dfs_path)[1:5]
output_vars = colnames(traits_dfs_path)[6:7]
path_coefs = traits_dfs_pls$path_coefs[output_vars, input_vars]
p_values = matrix(nrow=length(input_vars), ncol=length(output_vars))
rownames(p_values) = input_vars
colnames(p_values) = output_vars
p_values = data.frame(p_values)
for(var in output_vars){
p_values[,var] = traits_dfs_pls$inner_model[[var]][2:(length(input_vars)+1),4]
}
p_values = t(p_values)
results <- list("path_coefs" = path_coefs, "p_values" = p_values, "traits_dfs_pls" = traits_dfs_pls)
return(results)
}
plot_plspm_traits_dfs = function(path_coefs, p_values, significative_level = 0.05, title = "", color_lim)
{
corrplot(path_coefs, title=title, method="number",
sig.level = significative_level, p.mat = p_values,
is.corr = FALSE, cl.lim = color_lim, col=brewer.pal(n=8, name="PuOr"),
insig = "blank",  mar=c(0,0,1,0))
}
pls_analysis = function(first_df, second_df, third_df, first_title, second_title, third_title, type=1, color_lim = c(-1, 1)){
if(type==1){
first_pls = plspm_traits_dfs(first_df)
second_pls = plspm_traits_dfs(second_df)
third_pls = plspm_traits_dfs(third_df)
}else if(type==2){
first_pls = plspm_traits_dfs_2(first_df)
second_pls = plspm_traits_dfs_2(second_df)
third_pls = plspm_traits_dfs_2(third_df)
}else if(type==3){
first_pls = plspm_traits_dfs_3(first_df)
second_pls = plspm_traits_dfs_3(second_df)
third_pls = plspm_traits_dfs_3(third_df)
}else if(type==4){
first_pls = plspm_traits_dfs_4(first_df)
second_pls = plspm_traits_dfs_4(second_df)
third_pls = plspm_traits_dfs_4(third_df)
}else if(type==5){
first_pls = plspm_traits_dfs_5(first_df)
second_pls = plspm_traits_dfs_5(second_df)
third_pls = plspm_traits_dfs_5(third_df)
}else if(type==6){
first_pls = plspm_traits_dfs_6(first_df)
second_pls = plspm_traits_dfs_6(second_df)
third_pls = plspm_traits_dfs_6(third_df)
}
par(mfcol = c(3,2))
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, title = first_title, color_lim = color_lim)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, title = second_title, color_lim = color_lim)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, title = third_title, color_lim = color_lim)
mtext("Significative level = 0.05", line=-2, side=2, outer = TRUE)
plot_plspm_traits_dfs(first_pls$path_coefs, first_pls$p_values, significative_level = 0.1 ,title = first_title, color_lim = color_lim)
print(first_pls$p_values)
print(first_pls$path_coefs)
plot_plspm_traits_dfs(second_pls$path_coefs, second_pls$p_values, significative_level = 0.1, title = second_title, color_lim = color_lim)
print(second_pls$p_values)
print(second_pls$path_coefs)
plot_plspm_traits_dfs(third_pls$path_coefs, third_pls$p_values, significative_level = 0.1, title = third_title, color_lim = color_lim)
print(third_pls$p_values)
print(third_pls$path_coefs)
mtext("Significative level = 0.10", line = -1, side=4, outer = TRUE)
}
pls_analysis(first_df=first_df, second_df=second_df, third_df=third_df,
"1st", "2nd", "3rd",
color_lim = NULL)
pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Objectives Scenario",
color_lim = NULL)
pls_analysis(aesthetic_first, narrative_first, objectives_first,
"Aesthetic Scenario - 1st", "Narrative Scenario - 1st", "Objectives Scenario - 1st",
color_lim = NULL)
pls_analysis(aesthetic_df, narrative_df, objectives_df,
"Aesthetic Scenario", "Narrative Scenario", "Objectives Scenario",
color_lim = NULL)
cor(aesthetic_df$aesthetic, method = c("pearson", "kendall", "spearman"))
cor(aesthetic_df, method = c("pearson", "kendall", "spearman"))
cor(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), method = c("pearson", "kendall", "spearman"))
corrplot(cor(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), method = c("pearson", "kendall", "spearman")))
library(corrplot)
corrplot(cor(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), method = c("pearson", "kendall", "spearman")))
corrplot(cor(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), method = c("pearson", "kendall", "spearman")), type="upper")
corrplot(cor(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), method = c("pearson", "kendall", "spearman")), type="lower")
rcorr(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), method = c("pearson", "kendall", "spearman"))
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
rcorr(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), method = c("pearson", "kendall", "spearman"))
rcorr(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), type = c("pearson", "kendall", "spearman"))
rcorr(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]]), type = c("pearson", "spearman"))
rcorr(as.matrix(data.frame(Aesthetic=aesthetic_df[["aesthetic"]], Challenge=aesthetic_df[["challenge"]], Narrative=aesthetic_df[["narrative"]], Objectives=aesthetic_df[["objectives"]], Social=aesthetic_df[["social"]])), type = c("pearson", "spearman"))
